% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/calcProbabilities.R
\name{calcProbabilities}
\alias{calcProbabilities}
\title{Calculates Relative Transmission Probabilities}
\usage{
calcProbabilities(orderedPair, indIDVar, edgeIDVar, goldStdVar, covariates,
  label = "", l = 1, nbWeighting = FALSE, n = 10, m = 1,
  nReps = 10)
}
\arguments{
\item{orderedPair}{The name of the ordered pair-level dataset with the covariates.}

\item{indIDVar}{The variable name (in quotes) of the individual ID variable.}

\item{edgeIDVar}{The variable name (in quotes) of the edge ID variable.}

\item{goldStdVar}{The variable name (in quotes) that of logical vector defining training links/non-links}

\item{covariates}{A character vector containing the covariate variable names.}

\item{label}{An optional label string for the run.}

\item{l}{Laplace smoothing parameter that is added to each cell.}

\item{nbWeighting}{A logical scalar indicating if you want to use deep frequency weighting in NB.}

\item{n}{The number of folds for nxm cross valindIDation.}

\item{m}{The number of times to create n folds in nxm cross valindIDation.}

\item{nReps}{The number of times to randomly select one infector.}
}
\value{
List containing two dataframes:
\enumerate{
  \item \code{probabilities} - a dataframe of transmission probabilities with the
   following columns:
     \itemize{
       \item \code{label} - the optional label of the run
       \item \code{pAvg} - the mean transmission probability for the pair over all runs
       \item \code{pSD} - the standard deviation of the transmission probability for the pair
        over all runs
       \item \code{pScaled} - the mean relative transmission probability for the pair over
        all runs: pAvg scaled so that the probabilities for all infectors per infectee add to 1.
       \item \code{pRank} - the rank of the probability of the the pair out of all pairs for that
       infectee
       \item \code{nSamples} - the number of probability estimates that contributed to pAvg. This
       represents the number of validation datasets this pair was included in over the \code{nxm}
       cross validation repeated \code{nReps} times.
       \item \code{edgeIDVar} - the edgeID variable with the name specified
     }
  \item \code{estimates} - a dataframe with the effect estimates with the following columns:
     \itemize{
       \item \code{level} - the covariate name and level
       \item \code{label} - the optional label of the run
       \item \code{ratioMean} - the mean value of the likelihood ratio across runs
       \item \code{ratioMin} - the min value of the likelihood ratio across runs
       \item \code{ratioMax} - the max value of the likelihood ratio across runs
       \item \code{ratioSD} - the standard deviation of the likelihood ratio across runs
       \item \code{nSamples} - the number of samples included in the average: \code{n*m*nReps}
     }
}
}
\description{
\code{calcProbabilities} uses naive Bayes and an interative estimation procedure to calculate relative
 transmission probabilities
}
\details{
This algorithm takes a dataset of ordered possible infector-infectee pairs in an infectious disease
 cluster and estimates the relative probability the cases are linked by direct transmission.

The algorithm used a classification technique called naive Bayes (NB). NB is a simple machine learning
method that uses Bayes rule to estimate the probability of an outcome in a prediction dataset
given a set of \code{covariates} from the observed frequencies in a training dataset.
The covariates could be spatial, clinical, demographic, and temporal characteristics of the cases.

Then a subset of cases with pathogen WGS or contact investigation data are used to create a training
dataset of probable links and non/links. These probable links and non/links are defined by \code{goldStdVar}
which should be a logical vector with \code{TRUE} indicating links, \code{FALSE} nonlinks, and \code{NA} if
the pair cannot be used to train (does not have the information or is indeterminate).

Because the outcomes in our training set represent probable and not certain transmission events
and a given case could have mulitple probable infectors, we use an iterative estimation procedure.
This procedure randomly chooses one link of all of the possible links to include in the training
dataset \code{nReps} times, and then uses \code{mxn} cross validation to give all pairs a turn 
in the prediction dataset.
}
\examples{
## Use the pairData dataset which represents a TB-like outbreak
# First create a dataset of ordered pairs
orderedPair <- pairData[pairData$infectionDiffY > 0, ]

## Create a variable called snpClose that will define probable links
# (<3 SNPs) and nonlinks (>12 SNPs) all pairs with between 2-12 SNPs
# will not be used to train.
orderedPair$snpClose <- ifelse(orderedPair$snpDist < 3, TRUE,
                        ifelse(orderedPair$snpDist > 12, FALSE, NA))
table(orderedPair$snpClose)

## Running the algorithm
covariates = c("Z1", "Z2", "Z3", "Z4", "timeCat")
resGen <- calcProbabilities(orderedPair = orderedPair,
                            indIDVar = "individualID",
                            edgeIDVar = "edgeID",
                            goldStdVar = "snpClose",
                            covariates = covariates,
                            label = "SNPs",
                            nbWeighting = FALSE,
                            n = 10, m = 1, nReps = 10)
                            
## Merging the probabilities back with the pair-level data
allProbs <- merge(resGen[[1]], orderedPair, by = "edgeID", all = TRUE)


}
